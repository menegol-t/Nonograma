package logica;
import java.util.ArrayList;
import java.util.Random;

public class Tablero {

    private int[][]  _tablero;
    private int[][]  _referenciasCol;
    private int[][]  _referenciasFila;


    private static final Random RANDOM = new Random();

    private Tablero(int[][] tablero, int[][]referenciasCol, int[][] referenciasFila) 
    {
        _tablero = tablero;
        
        _referenciasCol = referenciasCol;
        
        _referenciasFila = referenciasFila;
    }

    public static Tablero generarJuego(int largoDelTablero)
    {
        int[][] tablero = generarTablero(largoDelTablero);
        
        int [][] rleferenciasCol = new int[largoDelTablero][3];
        
        int [][] referenciasFila = new int[largoDelTablero][3];
        
        return new Tablero(tablero, rleferenciasCol, referenciasFila);
    }

    
    /*
     * Toma como input un tablero con casillas negras. Es decir, una matriz cuadrada (originalmente de 5*5, pero escalable) de ints con valores:
     * 0 Blanca
     * 1 Negra
     * 2 Marcada
     *  
     *  Retorna una matriz de 5*3. 
     *  5 reresenta la cantidad de filas/ columnas de la matriz
     *  3, es porque cada fila/columna puede necesita 3 espacios (EN UNA MATRIZ DE 5) para representar las posibles cantidades de celdas marcadas
     *  Por ejemplo, una posible referencia es [4,0,0]: 1 1 1 1 0
     *  Otra posible referencia es [1,1,1]: 10101
     *  Entonces mi referencia tiene que poder contemplar el caso 111
     *   
     * */
    public static int[][] generarReferencias(int[][] tableroConCasillasNegras)
    {
    	
    }
    
    private static int[][] generarTablero(int largoDelTablero) 
    {
        int[][] tablero = new int[largoDelTablero][largoDelTablero];
        
        int[] patronDeFilasAleatorio = randomSinRepetir(largoDelTablero);
        
        int totalCasillasNegras = conseguirTotalCasillasNegras(largoDelTablero);
        
        rellenarTablero(tablero, totalCasillasNegras, largoDelTablero, patronDeFilasAleatorio);
        
        return tablero;
    }

    private static void rellenarTablero(int[][] tablero, int totalCasillasNegras, int cantidadDeFilas, int[] patronAleatorio) 
    {
        int casillasNegrasDisponibles = totalCasillasNegras;
        
        for (int i = 0; i<cantidadDeFilas; i++) 
        {
            int maximo, minimo;
            
            if (nosPasamosDeLaMitad(totalCasillasNegras, casillasNegrasDisponibles)) 
            {	
                maximo = 4; minimo = 3;
            } else {
                maximo = 2; minimo = 1;
            }
            int[] filaActual = tablero[patronAleatorio[i]];
            
            casillasNegrasDisponibles -= rellenarFilasYActualizar(filaActual, casillasNegrasDisponibles, maximo, minimo);
        }
    }

    private static boolean nosPasamosDeLaMitad(int totalCasillasNegras, int casillasNegrasDisponibles) 
    {
        return (totalCasillasNegras / 2 < casillasNegrasDisponibles);
    }

    private static int rellenarFilasYActualizar(int[] fila, int casillasNegrasDisponibles, int maximo, int minimo) 
    {	
        int cantidadCeldasNegrasEnFila = conseguirMaximoMinimo(maximo, minimo);
        
        ArrayList<Integer> posicionesDisponibles = new ArrayList<>();
        
        int largoFila = fila.length;
        
        agregarIndices(largoFila, posicionesDisponibles);

        for (int i = 0; i < cantidadCeldasNegrasEnFila; i++) 
        {
            int indiceAleatorio = randomEnRango(posicionesDisponibles.size());
            
            int posicionElegida = posicionesDisponibles.get(indiceAleatorio);
            
            fila[posicionElegida] = 1;
            
            posicionesDisponibles.remove(indiceAleatorio);
        }	
        return cantidadCeldasNegrasEnFila;
    }

    private static int conseguirMaximoMinimo(int max, int min) 
    {
        return RANDOM.nextBoolean() ? max : min; 
    }

    private static int[] randomSinRepetir(int rango) 
    {		
        ArrayList<Integer> indicesDisponibles = new ArrayList<>();
        
        agregarIndices(rango, indicesDisponibles);
        
        return generarPatronAleario(indicesDisponibles);
    }

    private static void agregarIndices(int rango, ArrayList<Integer> listaDeIndices) 
    {
        for (int i = 0; i<rango; i++) 
        {
            listaDeIndices.add(i);
        }
    }

    private static int[] generarPatronAleario(ArrayList<Integer> indicesDisponibles) 
    {
        int cantidadDeIndices = indicesDisponibles.size();
        
        int[] patronAleatorio = new int[cantidadDeIndices];
        
        int posicionActual = 0;
        
        while (!(indicesDisponibles.isEmpty())) 
        {
            int indiceAleatorio = randomEnRango(cantidadDeIndices);
            
            patronAleatorio[posicionActual] = indicesDisponibles.get(indiceAleatorio);
            
            indicesDisponibles.remove(indiceAleatorio);
            
            cantidadDeIndices --;
            
            posicionActual ++;
        }
        return patronAleatorio;
    }

    private static int randomEnRango(int rango) 
    {
        return RANDOM.nextInt(rango);
    }

    private static int conseguirTotalCasillasNegras(int largoDelTablero) 
    {
        float porcentajeDeNegrasDelTablero = 0.5f;
        
        int totalCasillasDelTablero = largoDelTablero * largoDelTablero;
        
        return Math.round(totalCasillasDelTablero * porcentajeDeNegrasDelTablero);
    }

    public static void imprimirMatriz(int[][] mat) 
    {
        for (int i = 0; i < mat.length; i++) 
        {
            for (int j = 0; j < mat[i].length; j++) 
            {
                System.out.print(mat[i][j] + " ");
            }
            System.out.println();
        }
    }

    public String toString() 
    {
        imprimirMatriz(_tablero);
        return null;
    }
}
