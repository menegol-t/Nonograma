package logica;

public class Main
{
	public static void main(String[] args) {
//		int[][] matrix = {
//			      {1, 0, 1, 0, 1},
//			      {1, 1, 1, 1, 0},
//			      {0, 0, 0, 0, 0},
//			      {1, 0, 0, 0, 1},
//			      {1, 0, 0, 1, 1}
//				};
		  
//				int[][] mat = generarReferenciaFilas(matrix);
				
//				int[][] matr = generarReferenciasColumnas(matrix, 5);
//		  
//				imprimirMatriz(matr);
	}
    
    public static int[][] generarReferenciasColumnas(int[][] tableroCasillasNegras, int largoDelTablero)
    {
    	int[][] tableroGirado90Grados = new int[largoDelTablero][largoDelTablero];
    	
    	for(int i = 0; i < largoDelTablero; i++)
    	{
    		for(int j = 0; j < largoDelTablero; j++)
    		{
    			tableroGirado90Grados[j][largoDelTablero - 1 - i] = tableroCasillasNegras[i][j];
    		}
    	}
    	
    	return generarReferenciaFilas(tableroGirado90Grados);
    }
    
    public static int[][] generarReferenciaFilas(int[][] tableroCasillasNegras) 
	{
		int maxReferenciasPorFila = (tableroCasillasNegras.length + 1) / 2;
	    
	    int[][] referenciasCalculadas = new int[tableroCasillasNegras.length][maxReferenciasPorFila];

	    return recorrerFilas(tableroCasillasNegras, referenciasCalculadas);
	}

	private static int[][] recorrerFilas(int[][] tableroCasillasNegras, int[][] referenciasCalculadas) 
	{
		for (int i = 0; i < tableroCasillasNegras.length; i++) 
	    {
	        int acumCasillasNegrasPorFila = 0, indiceReferenciasCalculadas = 0;
	        
	        boolean casillaAnteriorFueNegra = false;

	        acumularCasillasNegrasPorFila(tableroCasillasNegras, i, acumCasillasNegrasPorFila, casillaAnteriorFueNegra, referenciasCalculadas, indiceReferenciasCalculadas);
	    }
	    return referenciasCalculadas;
	}
	
	private static void acumularCasillasNegrasPorFila(int[][] tableroCasillasNegras,int filaActual, int acumCasillasNegrasPorFila,
			boolean casillaAnteriorFueNegra, int[][] referenciasCalculadas, int indiceReferenciasCalculadas) 
	{
		for (int j = 0; j < tableroCasillasNegras[filaActual].length; j++) 
        {	
            if (tableroCasillasNegras[filaActual][j] == 1) 
            {
            	acumCasillasNegrasPorFila++;
            	
            	casillaAnteriorFueNegra = true;
            }
            else if (casillaAnteriorFueNegra) 
            {
            	referenciasCalculadas[filaActual][indiceReferenciasCalculadas] = acumCasillasNegrasPorFila;
            	
            	acumCasillasNegrasPorFila = 0;
            	
            	indiceReferenciasCalculadas++;
                
                casillaAnteriorFueNegra = false;
            }
        }
		
		if (casillaAnteriorFueNegra) referenciasCalculadas[filaActual][indiceReferenciasCalculadas] = acumCasillasNegrasPorFila;
	}
	
	public static void imprimirMatriz(int[][] mat) 
    {
        for (int i = 0; i < mat.length; i++) 
        {
            for (int j = 0; j < mat[i].length; j++) 
            {
                System.out.print(mat[i][j] + " ");
            }
            System.out.println();
        }
    }
}