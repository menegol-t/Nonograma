package logica;

public class Juego 
{
	
	private TableroUsuario _tableroUsuario;
	
	private TableroRespuesta _tableroRespuesta;
	
	public Juego()
	{
		_tableroUsuario = null;
		_tableroRespuesta = null;
	}
	
	public void generarJuego(int tamanioDelTablero)
	{
		this._tableroUsuario = new TableroUsuario(tamanioDelTablero);
		this._tableroRespuesta = new TableroRespuesta(tamanioDelTablero);
	}
	
	public int[][] getReferenciasCol()
	{
		return _tableroRespuesta.getReferenciasCol();
	}
	
	public int[][] getReferenciasFilas()
	{
		return _tableroRespuesta.getReferenciasFila();
	}
	
	public int[][] getRespuestaCorrectaTrasFallar()
	{
		return _tableroRespuesta.getTablero();
	}
	
	public int[][] getRespuestaUsuario()
	{
		return _tableroUsuario.getTablero();
	}
	
	public void setCasilla(int fila, int columna, int estado)
	{
		_tableroUsuario.setCasilla(fila, columna, estado);
	}
	
	public int getCasilla(int fila, int columna)
	{
		return _tableroUsuario.getCasilla(fila, columna);
	}
	
	public boolean validarJuego()
	{
		_tableroUsuario.generarReferencias();
		
		boolean igualesValoresEnFilas = matricesSonIguales(_tableroUsuario.getReferenciasFila(), _tableroRespuesta.getReferenciasFila());
		
		boolean igualesValoresEnColumnas = matricesSonIguales(_tableroUsuario.getReferenciasCol(), _tableroRespuesta.getReferenciasCol());
		
		return	igualesValoresEnFilas && igualesValoresEnColumnas;
	}
	
	private boolean matricesSonIguales(int[][] primeraMatriz, int[][] segundaMatriz)
	{
	    if (primeraMatriz.length != segundaMatriz.length) 
	    {
	        return false;
	    }
	    
	    for (int i = 0; i < primeraMatriz.length; i++) 
	    
	    {
	        if (primeraMatriz[i].length != segundaMatriz[i].length) {
	            return false;
	        }
	        
	        for (int j = 0; j < primeraMatriz[i].length; j++) 
	        {
	            if (primeraMatriz[i][j] != segundaMatriz[i][j]) 
	            {
	                return false;
	            }
	        }
	    }
	    
	    return true;
	}
}